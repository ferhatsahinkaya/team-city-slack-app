/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package teamcity.slack.app

import com.fasterxml.jackson.databind.ObjectMapper
import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlRootElement
import com.fasterxml.jackson.module.kotlin.KotlinModule
import spark.Spark.*
import teamcity.slack.app.BuildState.Waiting

// TODO Return sensible http response content
fun main(args: Array<String>) {
    val builds = mutableListOf<Build>()

    port(getPort())
    get("/build") { req, _ ->
        builds
                .filter { it.state.name == req.queryParams("state") }
                .map { ObjectMapper().writeValueAsString(it) }
    }
    post("/build") { req, res ->
        val buildId = req.queryParams("text")
        builds.add(Build(buildId, Waiting, req.queryParams("response_url")))
        res.type("application/json")
        "{\"text\": \"$buildId build is added to the build queue\"}"
    }
    delete("/build") { req, _ ->
        builds.removeIf {
            it.id == ObjectMapper()
                    .registerModule(KotlinModule())
                    .readValue(req.body(), BuildId::class.java).id
        }
    }
}

data class Build(val id: String, val state: BuildState, val responseUrl: String)

enum class BuildState {
    Waiting
}

@JacksonXmlRootElement
data class BuildId(val id: String)

fun getPort() = ProcessBuilder().environment()["PORT"]?.toInt() ?: 4567